swagger: '2.0'
schemes:
  - https
host: learn-anything.xyz
basePath: /api
info:
  x-logo:
    url: 'https://github.com/learn-anything.png?size=200'
  title: Learn Anything
  version: 1.0.0
  contact:
    email: hi@learn-anything.xyz
  license:
    name: MIT
    url: 'https://github.com/learn-anything/learn-anything/blob/master/LICENSE'
produces:
  - application/json
consumes:
  - application/json
securityDefinitions:
  access_token:
    type: apiKey
    in: header
    name: Authorization
paths:
  /maps/:
    get:
      summary: Map suggestions
      operationId: maps.search
      description: |
        Get map suggestions if the `q` parameter is specified,
        get a random map otherwise.
      parameters:
        - name: q
          in: query
          type: string
          description: Search string
          example: graphics
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Suggestion'
      x-code-samples:
        - lang: JavaScript
          source: |
            const axios = require('axios');
            const query = 'graphics';
            axios.get(`https://learn-anything.xyz/api/maps?q=${query}`)
              .then(({ status, data }) => {
                console.log(status, data);
              });
        - lang: Shell
          source: |
            curl -X GET -G \
              'https://learn-anything.xyz/api/maps/' \
              -d 'q=graphics'
  '/maps/{mapID}':
    get:
      summary: Map by ID
      operationId: maps.byID
      description: |
        Get a map knowing its ID.
      parameters:
        - name: mapID
          in: path
          type: integer
          description: Map ID
          required: true
          example: 1
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Map'
        '404':
          description: Map not found
          schema:
            $ref: '#/definitions/APIError'
      x-code-samples:
        - lang: JavaScript
          source: |
            const axios = require('axios');
            const mapID = 1;
            axios.get(`https://learn-anything.xyz/api/maps/${mapID}`)
              .then(({ status, data }) => {
                console.log(status, data);
              });
        - lang: Shell
          source: |
            curl -X GET -G \
              'https://learn-anything.xyz/api/maps/1'
  '/maps/{title}':
    get:
      summary: Map by title
      operationId: maps.byTitle
      description: |
        Get a map knowing its title (path of the map on the graph).
      parameters:
        - name: title
          in: path
          type: string
          description: Map title
          required: true
          example: anthropology/archaeology
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Map'
        '404':
          description: Map not found
          schema:
            $ref: '#/definitions/APIError'
      x-code-samples:
        - lang: JavaScript
          source: |
            const axios = require('axios');
            const title = 'anthropology/archaeology';
            axios.get(`https://learn-anything.xyz/api/maps/${title}`)
              .then(({ status, data }) => {
                console.log(status, data);
              });
        - lang: Shell
          source: |
            curl -X GET -G \
              'https://learn-anything.xyz/api/maps/anthropology/archaeology'
  /resources/:
    post:
      summary: Resource create
      description: Create a resource
      operationId: resources.create
      parameters:
        - name: resource
          in: body
          description: Resource
          required: true
          schema:
            $ref: '#/definitions/Resource'
      security:
        - access_token: []
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ResourceResponse'
        '400':
          description: Bad request
          schema:
            type: object
            properties:
              error:
                type: string
                description: |
                  Error message describing which parameter is invalid or missing
                example: invalid URL
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIError'
          examples:
            application/json:
              error: unauthorized
        '403':
          description: Resource exists
          schema:
            $ref: '#/definitions/APIError'
          examples:
            application/json:
              error: resource already exists
        '404':
          description: Parent node not found
          schema:
            $ref: '#/definitions/APIError'
          examples:
            application/json:
              error: the specified parent node does not exist
      x-code-samples:
        - lang: JavaScript
          source: |
            const axios = require('axios');
            const resource = {
              text: 'Systemd - ArchWiki',
              url: 'https://wiki.archlinux.org/index.php/systemd',
              category: 'wiki',
              parentID: 4696,
            };

            axios.post(
              'https://learn-anything.xyz/api/resources/',
              resource,
              {
                headers: {
                  Authorization: `Bearer ${access_token}`
                }
              }
            ).then(({ status, data }) => {
              console.log(status, data);
            });
        - lang: Shell
          source: |
            curl -X POST \
              'https://learn-anything.xyz/api/resources/' \
              -H "Authorization:Bearer $access_token" \
              -H "Content-Type:application/json" \
              -d @resource.json
  /votes/:
    get:
      summary: Votes
      description: |
        Get user votes by map if `mapID` is specified, get all user votes
        otherwise
      operationId: votes.get
      parameters:
        - name: mapID
          in: query
          description: Map identifier
          type: integer
          example: 1584
      security:
        - access_token: []
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Vote'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/APIError'
          examples:
            application/json:
              error: unauthorized
      x-code-samples:
        - lang: JavaScript
          source: |
            const axios = require('axios');
            const mapID = 1584;
            axios.get(
              `https://learn-anything.xyz/api/votes/?mapID=${mapID}`,
              {
                headers: {
                  Authorization: `Bearer ${access_token}`,
                },
              },
            ).then(({ status, data }) => {
              console.log(status, data);
            });
        - lang: Shell
          source: |
            curl -X GET -G \
              'https://learn-anything.xyz/api/votes/?mapID=1584' \
              -H "Authorization:Bearer $access_token"
    post:
      summary: Vote create
      description: Create or modify a vote
      operationId: votes.create
      parameters:
        - name: vote
          in: body
          description: Vote
          required: true
          schema:
            type: object
            properties:
              resourceID:
                description: |
                  Resource identifier, it uses the following format "<parentID>|<url>"
                type: string
                example: '5769|https://www.codetuts.tech/compile-c-sharp-command-line/'
              direction:
                description: |
                  Direction of the vote. 1 is upvote, -1 is downvote, and 0 removes the
                  vote
                type: integer
                enum:
                  - 1
                  - 0
                  - -1
                example: 1
      security:
        - access_token: []
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              resource:
                $ref: '#/definitions/ResourceResponse'
              vote:
                $ref: '#/definitions/Vote'
        '400':
          description: Invalid vote direction
          schema:
            $ref: '#/definitions/APIError'
          examples:
            application/json:
              error: invalid vote direction
        '404':
          description: Resource not found
          schema:
            $ref: '#/definitions/APIError'
          examples:
            application/json:
              error: resource not found
      x-code-samples:
        - lang: JavaScript
          source: |
            const axios = require('axios');
            const vote = {
              resourceID: '5769|https://www.codetuts.tech/compile-c-sharp-command-line/',
              direction: 1,
            };

            axios.post(
              'https://learn-anything.xyz/api/votes/',
              vote,
              {
                headers: {
                  Authorization: `Bearer ${access_token}`,
                },
              },
            ).then(({ status, data }) => {
              console.log(status, data);
            });
        - lang: Shell
          source: |
            curl -X POST \
              'https://learn-anything.xyz/api/votes/' \
              -H "Authorization:Bearer $access_token" \
              -H "Content-Type:application/json" \
              -d @vote.json
definitions:
  APIError:
    type: object
    properties:
      error:
        type: string
        description: Error message
        example: map not found
  Suggestion:
    type: object
    properties:
      id:
        description: Map identifier
        type: string
        example: 215
      key:
        description: Name of the map (the one that shows on the searchbar)
        type: string
        example: scalable vector graphics
      title:
        description: Path to map
        type: string
        example: /computer-graphics/digital-images/vector-graphics/scalable-vector-graphics
  Map:
    type: object
    properties:
      mapID:
        description: Map identifier
        type: string
        example: 1
      key:
        description: Name of the map (the one that shows on the searchbar)
        type: string
        example: archaeology
      title:
        description: Path to map
        type: string
        example: learn anything - anthropology - archaeology
      nodes:
        description: |
          Object containing ID of nodes as keys, and arrays of nodes as values.
          There's also a null key, which contains only one node (the value is an
          object instead of an array), and that's the root node of the map
        type: object
        example:
          '3':
            - nodeID: 4
              parentID: 3
              text: Basics
              mapID: 1
            - nodeID: 5
              parentID: 3
              text: Help
              mapID: 1
          'null':
            nodeID: 3
            parentID: null
            text: Archaeology
            mapID: 1
      resources:
        type: object
        description: |
          Object containing ID of nodes as keys, and arrays of resources as
          values
        example:
          '3':
            - resourceID: '3|http://www.wikiwand.com/en/Archaeology'
              url: 'http://www.wikiwand.com/en/Archaeology'
              text: Archaeology
              category: wiki
              score:
                down: 0
                up: 0
              parentID: 3
              mapID: 1
            - resourceID: '3|https://www.reddit.com/r/Archaeology/'
              url: 'https://www.reddit.com/r/Archaeology/'
              text: /r/Archaeology
              category: reddit
              score:
                down: 0
                up: 0
              parentID: 3
              mapID: 1
          '4':
            - resourceID: '4|https://www.youtube.com/watch?v=ao4vVcfvyuE'
              url: 'https://www.youtube.com/watch?v=ao4vVcfvyuE'
              text: Short film on archaeology profession
              category: video
              score:
                down: 0
                up: 0
              parentID: 4
              mapID: 1
          '5':
            - resourceID: '5|https://www.youtube.com/playlist?list=PLwJVQxW2IAat6kGzPQy5xjRcXbxwhEcar'
              url: 'https://www.youtube.com/playlist?list=PLwJVQxW2IAat6kGzPQy5xjRcXbxwhEcar'
              text: History / archaeology documentaries
              category: video
              score:
                down: 0
                up: 0
              parentID: 5
              mapID: 1
  Resource:
    type: object
    properties:
      text:
        description: Title of the resource
        type: string
        example: Systemd - ArchWiki
        minLength: 6
      url:
        description: URL for the resource
        type: string
        format: url
        example: 'https://wiki.archlinux.org/index.php/systemd'
      category:
        description: Type of resource
        type: string
        example: wiki
        enum:
          - mindmap
          - wiki
          - stack exchange
          - course
          - free book
          - non-free book
          - paper
          - video
          - article
          - blog
          - github
          - interactive
          - image
          - podcast
          - newsletter
          - chat
          - youtube
          - reddit
          - quora
          - other
      parentID:
        description: ID of the node that will contain this resource
        type: integer
        example: 4696
  ResourceResponse:
    type: object
    properties:
      text:
        type: string
        description: Title of the resource
        example: Systemd - ArchWiki
        minLength: 6
      url:
        type: string
        format: url
        description: URL for the resource
        example: 'https://wiki.archlinux.org/index.php/systemd'
      category:
        type: string
        description: Type of resource
        example: wiki
        enum:
          - mindmap
          - wiki
          - stack exchange
          - course
          - free book
          - non-free book
          - paper
          - video
          - article
          - blog
          - github
          - interactive
          - image
          - podcast
          - newsletter
          - chat
          - youtube
          - reddit
          - quora
          - other
      parentID:
        type: integer
        description: ID of the node that will contain this resource
        example: 4696
      author:
        type: string
        description: ID of user that created the resource
        example: github|12345678
      createdAt:
        type: string
        format: date-time
        description: Date and time when the resource was created
        example: 'Sat Dec 16 2017 14:37:09 GMT+0000 (UTC)'
      modifiedAt:
        type: string
        format: date-time
        description: Date and time when the resource was last modified
        example: 'Sat Dec 16 2017 14:37:09 GMT+0000 (UTC)'
  Vote:
    type: object
    properties:
      userID:
        type: string
        description: ID of user that created the resource
        example: github|12345678
      resourceID:
        description: |
          Resource identifier, it uses the following format "<parentID>|<url>"
        type: string
        example: '5769|https://www.codetuts.tech/compile-c-sharp-command-line/'
      mapID:
        description: Map containing the resource
        type: integer
        example: 1584
      direction:
        description: |
          Direction of the vote. 1 is upvote, -1 is downvote, and 0 removes the
          vote
        type: integer
        enum:
          - 1
          - 0
          - -1
        example: 1
      createdAt:
        type: string
        format: date-time
        description: Date and time when the resource was created
        example: 'Sat Dec 16 2017 14:37:09 GMT+0000 (UTC)'
      modifiedAt:
        type: string
        format: date-time
        description: Date and time when the resource was last modified
        example: 'Sat Dec 16 2017 14:37:09 GMT+0000 (UTC)'
